--- The following usc defines a simple example application.
--
-- A ramp feeds a sine generator which in turn is threshold checked.
-- Threshold checking outputs the current state as well as events upon
-- passing the threshold. The events are connected to a mqueue block,
-- where they can be logged using ubx-mq.
--
-- This usc describes the following setup:
--
--   /------\    /-----\    /-----\    /----\
--   | ramp |--->| sin |--->|thres|--->| mq |
--   \------/    \-----/    \-----/    \----/
--      ^           ^          ^
--      .           . #2       .
--   #1 .           .          .
--      .        /------\      . #3
--      .........| trig |.......
--               \------/
--
--   ---> depicts data flow
--   ...> means "triggers"
--

return bd.system
{
   imports = {
      "stdtypes",
      "ptrig",
      "lfds_cyclic",
      "mqueue",
      "threshold",
      "ramp_double",
      "math_double"
   },

   blocks = {
      { name="thres", type="ubx/threshold" },
      { name="ramp", type="ubx/ramp_double" },
      { name="sin", type="ubx/math_double" },
      { name="trigger", type="ubx/ptrig" },
      { name="mq", type="ubx/mqueue" },
   },

   configurations = {
      {
	 name="thres",
	 config = { threshold = 0.8 }
      },
      {
	 name="ramp",
	 config = { slope=0.05 }
      },
      {
	 name="sin",
	 config = { func="sin" }
      },
      {
	 name="trigger",
	 config = {
	   period = {sec=0, usec=10000 }, -- 100 Hz
	    chain0 = {
	       { b="#ramp" },
	       { b="#sin" },
	       { b="#thres"} }
	 }
      },
      {
	 name="mq",
	 config = {
	    mq_id="threshold_events",
	    type_name = 'struct thres_event', buffer_len = 8
	 }
      },
   },

   connections = {
      { src="ramp.out", tgt="sin.x" },
      { src="sin.y", tgt="thres.in" },
      { src="thres.event", tgt="mq" },
   },
}
